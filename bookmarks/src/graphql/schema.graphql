extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.0",
        import: ["@external", "@key", "@requires", "@shareable"])

# SCALARS

"""
An ISO 8601-encoded UTC date string.
"""
scalar DateTime

"""
A well-formatted URL string.
"""
scalar URL

# ENUMS

"""
Sorting options for bookmark connections.
"""
enum BookmarkOrderBy {
  "Order bookmarks ascending by creation time."
  CREATED_AT_ASC
  "Order bookmarks descending by creation time."
  CREATED_AT_DESC
}

# OBJECTS

"""
An account is a unique Auth0 user.
"""
type Account @key(fields: "id") {
  id: ID!
}

"""
A bookmark contains content authored by a user.
"""
type Bookmark {
  "The unique ID of the bookmark."
  id: ID!
  "The date and time the bookmark was created."
  createdAt: DateTime!
  "The profile of the user who authored the bookmark."
  owner: Profile!
  "Whether a bookmark has been marked as private."
  private: Boolean!
  "User-applied tags for the bookmark."
  tags: [String]
  "A title to describe the bookmarked content."
  title: String
  "The URL of the page to be bookmarked."
  url: URL!
}

"""
A list of bookmark edges with pagination information.
"""
type BookmarkConnection {
  "A list of bookmark edges."
  edges: [BookmarkEdge]
  "Information to assist with pagination."
  pageInfo: PageInfo!
}

"""
A single bookmark node with its cursor.
"""
type BookmarkEdge {
  "A cursor for use in pagination."
  cursor: ID!
  "A bookmark at the end of an edge."
  node: Bookmark!
}

"""
Information about pagination in a connection.
"""
type PageInfo @shareable {
  "The cursor to continue from when paginating forward."
  endCursor: String
  "Whether there are more items when paginating forward."
  hasNextPage: Boolean!
  "Whether there are more items when paginating backward."
  hasPreviousPage: Boolean!
  "The cursor to continue from them paginating backward."
  startCursor: String
}

"""
A profile contains metadata about a specific user.
"""
type Profile @key(fields: "account { id }") {
  account: Account
  interests: [String] @external
  """
  A list of bookmarks created by the user.

  Private bookmarks will be hidden for non-owners.
  """
  bookmarks(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: BookmarkOrderBy = CREATED_AT_DESC
  ): BookmarkConnection
  """
  A list of recommended bookmarks for a user, based on their interests.
  """
  recommendedBookmarks(after: String, first: Int): BookmarkConnection
    @requires(fields: "interests")
}

# INPUTS

"""
Provides data to create a bookmark.
"""
input CreateBookmarkInput {
  "The Auth0 ID of the user who created the bookmark."
  ownerAccountId: ID!
  "Whether a bookmark should be marked as private."
  private: Boolean!
  "User-applied tags for the bookmark."
  tags: [String]
  "The title of the page to be bookmarked."
  title: String
  "The URL of the page to be bookmarked."
  url: URL!
}

"""
Provides data to delete a bookmark.
"""
input DeleteBookmarkInput {
  "The unique ID of the bookmark."
  id: ID!
  "The Auth0 ID of the user who created the bookmark."
  ownerAccountId: ID!
}

"""
Provides data to update an existing bookmark.
"""
input UpdateBookmarkInput {
  "The unique ID of the bookmark."
  id: ID!
  "The Auth0 ID of the user who created the bookmark."
  ownerAccountId: ID!
  "The updated privacy setting for the bookmark."
  private: Boolean
  "An updated user-applied tags for the bookmark."
  tags: [String]
  "The updated title to describe the bookmarked content."
  title: String
  "The updated URL of the bookmarked page."
  url: URL
}

# ROOT

type Query {
  "Retrieves a single bookmark by ID."
  bookmark(id: ID!): Bookmark!
  "Provides a search string to query relevant bookmarks."
  searchBookmarks(
    after: String
    first: Int
    "The text string to search for in bookmark title."
    query: String!
  ): BookmarkConnection
}

type Mutation {
  "Creates a new bookmark."
  createBookmark(input: CreateBookmarkInput!): Bookmark!
    @owner(argumentName: "input.ownerAccountId")
  "Deletes all of a user's bookmarks."
  deleteAllUserBookmarks(ownerAccountId: ID!): Boolean!
    @scope(permissions: ["delete:bookmarks"])
  "Deletes a bookmark."
  deleteBookmark(input: DeleteBookmarkInput!): Boolean!
    @owner(argumentName: "input.ownerAccountId")
  "Updates a bookmark."
  updateBookmark(input: UpdateBookmarkInput!): Bookmark!
    @owner(argumentName: "input.ownerAccountId")
}
